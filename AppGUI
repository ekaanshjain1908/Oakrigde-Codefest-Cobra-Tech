import PySimpleGUI as sg
import matplotlib.pyplot as plt
import io
from PIL import Image

#Data from backend
Day_21Jan = {'Food': 2668, 'Grocery': 1180}
Weekly = {'Food': 2024, 'Grocery': 11603, 'Entertainment': 4954, 'Miscellaneous': 64997, 'Electronic': 355992, 'Home Improvement': 332696}
Monthly = {'Week 1': 170, 'Week 2': 200, 'Week 3': 300, 'Week 4': 400}
Yearly = {'Mon': 51, 'Tue': 2, 'Wed': 3, 'Thu': 4, 'Fri': 5, 'Sat': 6, 'Sun': 7}
salary_value = ''
expenditure = 16000


#Line graphs for window 2
fig_line1, ax_line1 = plt.subplots()
ax_line1.plot(Day_21Jan.keys(), Day_21Jan.values(), marker='o', label='Data 1')
ax_line1.set_title('Daily')
ax_line1.set_ylabel('Expenditure')
ax_line1.legend()

fig_line2, ax_line2 = plt.subplots()
ax_line2.plot(Weekly.keys(), Weekly.values(), marker='o', label='Data 2')
ax_line2.set_title('Yearly')
ax_line2.set_ylabel('Expenditure')
ax_line2.legend()

fig_line3, ax_line3 = plt.subplots()
ax_line3.plot(Monthly.keys(), Monthly.values(), marker='o', label='Data 3')
ax_line3.set_title('Monthly')
ax_line3.set_ylabel('Expenditure')
ax_line3.legend()

fig_line4, ax_line4 = plt.subplots()
ax_line4.plot(Yearly.keys(), Yearly.values(), marker='o', label='Data 4')
ax_line4.set_title('Weekly')
ax_line4.set_ylabel('Expenditure')
ax_line4.legend()

img_line1_data = io.BytesIO()
fig_line1.savefig(img_line1_data, format='png')
img_line1_data.seek(0)

img_line2_data = io.BytesIO()
fig_line2.savefig(img_line2_data, format='png')
img_line2_data.seek(0)

img_line3_data = io.BytesIO()
fig_line3.savefig(img_line3_data, format='png')
img_line3_data.seek(0)

img_line4_data = io.BytesIO()
fig_line4.savefig(img_line4_data, format='png')
img_line4_data.seek(0)

#Bar Graph for window 3
fig1, ax1 = plt.subplots()
fig2, ax2 = plt.subplots()
fig3, ax3 = plt.subplots()
fig4, ax4 = plt.subplots()

ax1.bar(Day_21Jan.keys(), Day_21Jan.values(), color='blue')
ax1.set_title('Day(Today)')
ax1.set_ylabel('Cost')
ax1.yaxis.set_major_formatter('₹{x:,.0f}')

ax2.bar(Weekly.keys(), Weekly.values(), color='orange')
ax2.set_title('Year')
ax2.set_ylabel('Cost')
ax2.yaxis.set_major_formatter('₹{x:,.0f}')

ax3.bar(Monthly.keys(), Monthly.values(), color='green')
ax3.set_title('Month')
ax3.set_ylabel('Cost')
ax3.yaxis.set_major_formatter('₹{x:,.0f}')

ax4.bar(Yearly.keys(), Yearly.values(), color='purple')
ax4.set_title('Week')
ax4.set_ylabel('Cost')
ax4.yaxis.set_major_formatter('₹{x:,.0f}')

img1_data = io.BytesIO()
fig1.savefig(img1_data, format='png')
img1_data.seek(0)

img2_data = io.BytesIO()
fig2.savefig(img2_data, format='png')
img2_data.seek(0)

img3_data = io.BytesIO()
fig3.savefig(img3_data, format='png')
img3_data.seek(0)

img4_data = io.BytesIO()
fig4.savefig(img4_data, format='png')
img4_data.seek(0)

#Pie graphs for window 4
fig_pie1, ax_pie1 = plt.subplots()
ax_pie1.pie(Day_21Jan.values(), labels=Day_21Jan.keys(), autopct="%1.1f%%")
plt.title("Today")
plt.axis("equal")
ax_pie1.legend()

fig_pie2, ax_pie2 = plt.subplots()
ax_pie2.pie(Weekly.values(), labels=Weekly.keys(), autopct="%1.1f%%")
plt.title("Weekly")
plt.axis("equal")
ax_pie2.legend()

fig_pie3, ax_pie3 = plt.subplots()
ax_pie3.pie(Monthly.values(), labels=Monthly.keys(), autopct="%1.1f%%")
plt.title("Monthly")
plt.axis("equal")
ax_pie3.legend()

fig_pie4, ax_pie4 = plt.subplots()
ax_pie4.pie(Yearly.values(), labels=Yearly.keys(), autopct="%1.1f%%")
plt.title("Yearly")
plt.axis("equal")
ax_pie4.legend()

img_pie1_data = io.BytesIO()
fig_pie1.savefig(img_pie1_data, format='png')
img_pie1_data.seek(0)

img_pie2_data = io.BytesIO()
fig_pie2.savefig(img_pie2_data, format='png')
img_pie2_data.seek(0)

img_pie3_data = io.BytesIO()
fig_pie3.savefig(img_pie3_data, format='png')
img_pie3_data.seek(0)

img_pie4_data = io.BytesIO()
fig_pie4.savefig(img_pie4_data, format='png')
img_pie4_data.seek(0)




#Custom Theme
sg.LOOK_AND_FEEL_TABLE['MyTheme'] = {'BACKGROUND': '#000000',
                                      'TEXT': '#82CAFF',
                                      'INPUT': '#E6E6E6',
                                      'TEXT_INPUT': '#282130',
                                      'SCROLL': '#414a4c',
                                      'BUTTON': ('#6D6D6D', '#123456'),
                                      'PROGRESS': ('#D1826B', '#CC8019'),
                                      'BORDER': 1, 'SLIDER_DEPTH': 0,
                                      'PROGRESS_DEPTH': 0}

sg.theme('MyTheme')

button_proportion = (20, 10)  # (width, height)
graph_proportion = (80, 90)

#layout for windows 1-4
layout_window1 = [
    [sg.Text("Enter your current Salary:"), sg.InputText(size=(30,4), key='input_text')],
    [sg.Text("Note: in a real application, the user need not enter this ")],
    [sg.Text("Please fill your expected expenditure for the following categories:")],
    [sg.Text("Repairs"), sg.InputText(size=(30,4), key='repair')],
    [sg.Text("Movies"), sg.InputText(size=(30,4), key='movies')],
    [sg.Text("Transport"), sg.InputText(size=(30,4), key='transport')],
    [sg.Text("Insurance"), sg.InputText(size=(30,4), key='insurance')],
    [sg.Text("Food"), sg.InputText(size=(30,4), key='food')],
    [sg.Text("Grocery"), sg.InputText(size=(30,4), key='grocery')],
    [sg.Text("Entertainment"), sg.InputText(size=(30,4), key='entertainment')],
    [sg.Text("Electronic"), sg.InputText(size=(30,4), key='electronic')],
    [sg.Text("Home Improvement"), sg.InputText(size=(30,4), key='home')],
    [sg.Button('Next', size=(30,4))]
]
layout_window2 = [
    [sg.Button('Day', key='l_graph1', size=(30,4)),  sg.Button('Month', key='l_graph3', size=(30,4)), sg.Button('Year', key='l_graph2', size=(30,4)),
    sg.Button('Week', key='l_graph4', size=(30,4))],
    [sg.Image(data=img_line1_data.getvalue(), key='canvas_line1'), sg.Image(data=img_line2_data.getvalue(), key='canvas_line2'),
    sg.Image(data=img_line3_data.getvalue(), key='canvas_line3'), sg.Image(data=img_line4_data.getvalue(), key='canvas_line4')],
    [sg.Button('Previous', size=(30,4)), sg.Button('Next', size=(30,4))],
]
layout_window3 = [
    [sg.Button('Day', key='b_graph1', size=(30,4)), sg.Button('Month', key='b_graph3', size=(30,4)), sg.Button('Year', key='b_graph2', size=(30,4)),
     sg.Button('Week', key='b_graph4', size=(30,4))],
    [sg.Image(data=img1_data.getvalue(), key='canvas1'), sg.Image(data=img2_data.getvalue(), key='canvas2'),
     sg.Image(data=img3_data.getvalue(), key='canvas3'), sg.Image(data=img4_data.getvalue(), key='canvas4')],
    [sg.Button('Previous', size=(30,4)), sg.Button('Next', size=(30,4))],
]

layout_window4 = [
    [sg.Button('Day', key='p_graph1', size=(30,4)), sg.Button('Month', key='p_graph3', size=(30,4)), sg.Button('Year', key='p_graph2', size=(30,4)),
    sg.Button('Week', key='p_graph4', size=(30,4))],
    [sg.Image(data=img_pie1_data.getvalue(), key='canvas_pie1'),sg.Image(data=img_pie2_data.getvalue(), key='canvas_pie2'),
     sg.Image(data=img_pie3_data.getvalue(), key='canvas_pie3'),sg.Image(data=img_pie4_data.getvalue(), key='canvas_pie4')],
    [sg.Button('Previous', size=(30,4)), sg.Button('Next', size=(30,4))]
]

layout_window5 = [
    [sg.Button('Day', key='day_5', size=(30, 4)),
     sg.Button('Week', key='week_5', size=(30, 4)),
     sg.Button('Month', key='month_5', size=(30, 4)),
     sg.Button('Year', key='year_5', size=(30, 4)),
     sg.Button('Show Graphs', key='show_graphs', size=(30, 4))],
    [sg.Text("Your current salary: "), sg.Text('', key='output_text'),
    sg.Text(f"While your average monthly expenditure is: {expenditure}")]
]


window1 = sg.Window('Welcome to cobra tech',
                    layout=layout_window1,
                    resizable=True,
                    element_justification='c',
                    location=(10, 300),
                    ).finalize()

window2 = sg.Window('Line Graphs',
                    layout=layout_window2,
                    resizable=True,
                    element_justification='c',
                    location=(10, 300),
                    ).finalize()

window3 = sg.Window('Bar Graphs',
                    layout=layout_window3,
                    resizable=True,
                    element_justification='c',
                    location=(10, 300),
                    ).finalize()

window4 = sg.Window('Pie Graphs',
                    layout=layout_window4,
                    resizable=True,
                    element_justification='c',
                    location=(10, 300),
                    ).finalize()
window5 = sg.Window('Savings vs Expenditure',
                                layout=layout_window5,
                                resizable=True,
                                element_justification='c',
                                location=(10, 300),
                                ).finalize()

# Maximize the windows to achieve fullscreen behavior
window1.Maximize()
window2.Maximize()
window3.Maximize()
window4.Maximize()
window5.Maximize()



window2.hide()
window3.hide()
window4.hide()
window5.hide()

windows = [window1, window2, window3, window4]
current_window_index = 0

#Hides the graphs
window2['canvas_line1'].update(data="")
window2['canvas_line2'].update(data="")
window2['canvas_line3'].update(data="")
window2['canvas_line4'].update(data="")

window3['canvas1'].update(data="")
window3['canvas2'].update(data="")
window3['canvas3'].update(data="")
window3['canvas4'].update(data="")

window4['canvas_pie1'].update(data="")
window4['canvas_pie2'].update(data="")
window4['canvas_pie3'].update(data="")
window4['canvas_pie4'].update(data="")

while True:
    window, event, values = sg.read_all_windows()

    if event == sg.WIN_CLOSED:
        break

    if event == 'Next':
        if current_window_index == 0:
            input_text = values['input_text']
            window5['output_text'].update(input_text)

        # Check if it's the last window
        if current_window_index == len(windows) - 1:
            # Update the salary_value variable with the entered value
            salary_value = input_text
            expenditure = 16000

        else:
            # Go forward a window
            windows[current_window_index].hide()
            current_window_index = (current_window_index + 1) % len(windows)
            windows[current_window_index].un_hide()
            windows[current_window_index].Maximize()

    elif event.startswith(('l_graph', 'b_graph', 'p_graph')):
        _, graph_type, graph_num = event.split('_')

        # Update the corresponding canvas in the respective window
        if graph_type == 'graph':
            graph_num = int(graph_num)
            if 1 <= graph_num <= 4:
                window2[f'canvas_line{graph_num}'].update(data=img_line_data[graph_num - 1].getvalue())
                img_line_data[graph_num - 1].seek(0)
            elif 1 <= graph_num <= 4:
                window3[f'canvas{graph_num}'].update(data=img_data[graph_num - 1].getvalue())
                img_data[graph_num - 1].seek(0)
            elif 1 <= graph_num <= 4:
                window4[f'canvas_pie{graph_num}'].update(data=img_pie_data[graph_num - 1].getvalue())
                img_pie_data[graph_num - 1].seek(0)

for window in windows:
    window.close()

